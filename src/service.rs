// Copyright 2016 MaidSafe.net limited.
//
// This SAFE Network Software is licensed to you under (1) the MaidSafe.net Commercial License,
// version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
// licence you accepted on initial access to the Software (the "Licences").
//
// By contributing code to the SAFE Network Software, or to this project generally, you agree to be
// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the
// Licenses can be found in the root directory of this project at LICENSE, COPYING and CONTRIBUTOR.
//
// Unless required by applicable law or agreed to in writing, the SAFE Network Software distributed
// under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.
//
// Please review the Licences for the specific language governing permissions and limitations
// relating to use of the SAFE Network Software.

use net2;
use std::io;
use state::State;
use event::Event;
use error::Error;
use std::net::{SocketAddr, SocketAddrV4, Ipv4Addr};
use peer_id::{self, PeerId};
use std::sync::{Arc, Mutex};
use std::collections::HashMap;
use core::{Core, CoreMessage, Context};
use service_discovery::ServiceDiscovery;
use mio::{EventLoop, NotifyError, Sender};
use static_contact_info::StaticContactInfo;
use connection_states::EstablishConnection;
use maidsafe_utilities::thread::RaiiThreadJoiner;
use sodiumoxide::crypto::box_::{self, PublicKey, SecretKey};
use nat::mapped_tcp_socket::MappingTcpSocket;
use nat::mapping_context::MappingContext;
use nat::mapping_server::TcpMappingServer;
use nat::rendezvous_info::{PubRendezvousInfo, PrivRendezvousInfo, gen_rendezvous_info};

/// The result of a `Service::prepare_contact_info` call.
#[derive(Debug)]
pub struct ConnectionInfoResult {
    /// The token that was passed to `prepare_connection_info`.
    pub result_token: u32,
    /// The new contact info, if successful.
    pub result: io::Result<OurConnectionInfo>,
}

/// Contact info generated by a call to `Service::prepare_contact_info`.
#[derive(Debug)]
pub struct OurConnectionInfo {
    pub id: PeerId,
    pub tcp_info: PubRendezvousInfo,
    pub priv_tcp_info: PrivRendezvousInfo,
    pub tcp_socket: Option<net2::TcpBuilder>,
    pub static_contact_info: StaticContactInfo,
}

impl OurConnectionInfo {
    /// Convert our connection info to theirs so that we can give it to peer.
    pub fn to_their_connection_info(&self) -> TheirConnectionInfo {
        TheirConnectionInfo {
            tcp_info: self.tcp_info.clone(),
            static_contact_info: self.static_contact_info.clone(),
            // tcp_addrs: self.tcp_addrs.clone(),
            id: self.id,
        }
    }
}


/// Contact info used to connect to another peer.
#[derive(Debug, RustcEncodable, RustcDecodable)]
pub struct TheirConnectionInfo {
    tcp_info: PubRendezvousInfo,
    static_contact_info: StaticContactInfo,
    id: PeerId,
}

impl TheirConnectionInfo {
    /// Returns the `PeerId` of the node that created this connection info.
    pub fn id(&self) -> PeerId {
        self.id
    }
}

/// A structure representing a connection manager.
pub struct Service {
    // This is the connection map -> PeerId <-> Context
    connection_map: Arc<Mutex<HashMap<PeerId, Context>>>,
    event_tx: ::CrustEventSender,
    mapping_context: Arc<MappingContext>,
    mio_tx: Sender<CoreMessage>,
    our_keys: (PublicKey, SecretKey),
    service_discovery: Arc<Mutex<Option<Context>>>,
    static_contact_info: Arc<Mutex<StaticContactInfo>>,
    _thread_joiner: RaiiThreadJoiner,
}

impl Service {
    /// Constructs a service.
    pub fn new(event_tx: ::CrustEventSender) -> Result<Self, Error> {
        let mut event_loop = try!(EventLoop::new());
        let mio_tx = event_loop.channel();
        let our_keys = box_::gen_keypair();
        // Form our initial contact info
        let static_contact_info = Arc::new(Mutex::new(StaticContactInfo {
            tcp_acceptors: Vec::new(),
            tcp_mapper_servers: Vec::new(),
        }));
        let mapping_context = MappingContext::new();

        let joiner = RaiiThreadJoiner::new(thread!("Crust event loop", move || {
            let mut core = Core::new();
            event_loop.run(&mut core).expect("EventLoop failed to run");
        }));

        Ok(Service {
            connection_map: Arc::new(Mutex::new(HashMap::new())),
            event_tx: event_tx,
            mapping_context: Arc::new(mapping_context),
            mio_tx: mio_tx,
            our_keys: our_keys,
            service_discovery: Arc::new(Mutex::new(None)),
            static_contact_info: static_contact_info,
            _thread_joiner: joiner,
        })
    }

    /// Starts listening for beacon broadcasts.
    pub fn start_service_discovery(&mut self) {
        if self.service_discovery.lock().unwrap().is_some() {
            return;
        }
        let service_discovery = self.service_discovery.clone();
        let cloned_contact_info = self.static_contact_info.clone();
        let _ = self.post(move |core, event_loop| {
            if let Err(e) = ServiceDiscovery::new(core,
                                                  event_loop,
                                                  cloned_contact_info,
                                                  service_discovery,
                                                  5483) {
                println!("Could not start ServiceDiscovery: {:?}", e);
            }
        });
    }


    /// connect to peer
    pub fn connect(&mut self, peer_contact_info: SocketAddr) {
        let routing_tx = self.event_tx.clone();
        let connection_map = self.connection_map.clone();

        let _ = self.post(move |core, event_loop| {
            EstablishConnection::new(core,
                                     event_loop,
                                     connection_map,
                                     routing_tx,
                                     peer_contact_info);
        });
    }

    /// dropping a peer
    pub fn drop_peer(&mut self, peer_id: PeerId) {
        let context = self.connection_map
                          .lock()
                          .unwrap()
                          .remove(&peer_id)
                          .expect("Context not found");
        let _ = self.post(move |mut core, mut event_loop| {
            let state = core.get_state(&context).expect("State not found").clone();
            state.borrow_mut().terminate(&mut core, &mut event_loop);
        });
    }

    /// sending data to a peer(according to it's u64 peer_id)
    pub fn send(&mut self, peer_id: PeerId, data: Vec<u8>) {
        if data.len() > ::MAX_DATA_LEN as usize {
            let _ = self.event_tx.send(Event::WriteMsgSizeProhibitive(peer_id, data));
            return;
        }
        let context = self.connection_map
                          .lock()
                          .unwrap()
                          .get(&peer_id)
                          .expect("Context not found")
                          .clone();
        let mut data = Some(data);
        let _ = self.post(move |mut core, mut event_loop| {
            let state = core.get_state(&context).expect("State not found").clone();
            state.borrow_mut().write(&mut core,
                                     &mut event_loop,
                                     data.take().expect("Logic Error"));
        });
    }

    /// Enable listening and responding to peers searching for us. This will allow others finding us
    /// by interrogating the network.
    pub fn set_service_discovery_listen(&self, listen: bool) {
        if let Some(handle) = *self.service_discovery.lock().unwrap() {
            let _ = self.post(move |core, _| {
                let state = core.get_state(&handle)
                                .expect("ServiceDiscovery not found")
                                .clone();
                let mut temp = state.borrow_mut();
                let service_discovery = match temp.as_any().downcast_mut::<ServiceDiscovery>() {
                    Some(b) => b,
                    None => panic!("&ServiceDiscovery isn't a ServiceDiscovery!"),
                };
                service_discovery.set_listen(listen);
            });
        }
    }

    /// Interrogate the network to find peers.
    pub fn seek_peers(&self) {
        if let Some(handle) = *self.service_discovery.lock().unwrap() {
            let _ = self.post(move |core, _| {
                let state = core.get_state(&handle).expect("State not found").clone();
                let mut temp = state.borrow_mut();
                let service_discovery = match temp.as_any().downcast_mut::<ServiceDiscovery>() {
                    Some(b) => b,
                    None => panic!("&ServiceDiscovery isn't a ServiceDiscovery!"),
                };
                service_discovery.seek_peers().unwrap();
            });
        }
    }

    /// Starts accepting TCP connections.
    pub fn start_listening_tcp(&mut self) {
        let our_static_contact_info = self.static_contact_info.clone();
        let event_tx = self.event_tx.clone();
        let mapping_context = self.mapping_context.clone();
        let _ = self.post(move |mut core, mut event_loop| {
            match TcpMappingServer::new(core,
                                        event_loop,
                                        &mapping_context,
                                        move |_, _, result|
                {
                    our_static_contact_info.lock()
                                           .expect("Failed in locking static_contact_info")
                                           .tcp_acceptors
                                           .extend(result.expect("Failed getting addrs"));
                },
            ) {
                Ok(()) => {}
                Err(e) => {
                    debug!("Error mapping tcp server: {}", e);
                    let _ = event_tx.send(Event::FailedCreatingPublicTcpServer);
                },
            }
        });
    }

    /// Lookup a mapped udp socket based on result_token
    // TODO: immediate return in case of sender.send() returned with NotificationError
    pub fn prepare_connection_info(&mut self, result_token: u32) {
        let event_tx = self.event_tx.clone();
        let our_pub_key = self.our_keys.0.clone();
        let static_contact_info = self.static_contact_info.lock().unwrap().clone();
        let mapping_context = self.mapping_context.clone();
        if let Err(e) = self.post(move |mut core, mut event_loop| {
            let event_tx_clone = event_tx.clone();
            let addr = SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(0, 0, 0, 0), 0));
            match MappingTcpSocket::new(core,
                                        event_loop,
                                        &addr,
                                        &mapping_context,
                                        move |_, _, socket, addrs|
                {
                    let event_tx = event_tx_clone;
                    let (our_priv_tcp_info, our_pub_tcp_info) = gen_rendezvous_info(addrs);
                    let event = Event::ConnectionInfoPrepared(ConnectionInfoResult {
                        result_token: result_token,
                        result: Ok(OurConnectionInfo {
                            id: peer_id::new_id(our_pub_key),
                            tcp_info: our_pub_tcp_info,
                            priv_tcp_info: our_priv_tcp_info,
                            tcp_socket: Some(socket),
                            static_contact_info: static_contact_info,
                        }),
                    });
                    let _ = event_tx.send(event);
                },
            ) {
                Ok(()) => (),
                Err(e) => {
                    debug!("Error mapping tcp socket: {}", e);
                    let _ = event_tx.send(Event::ConnectionInfoPrepared(ConnectionInfoResult {
                        result_token: result_token,
                        result: Err(From::from(e)),
                    }));
                },
            };
        }) {
            let _ = self.event_tx.send(Event::ConnectionInfoPrepared(ConnectionInfoResult {
                result_token: result_token,
                result: Err(io::Error::new(io::ErrorKind::Other,
                                           format!("Failed to register task with mio eventloop: 
                                                    {}", e))),
            }));
        }
    }

    fn post<F>(&self, f: F) -> Result<(), NotifyError<CoreMessage>>
        where F: FnOnce(&mut Core, &mut EventLoop<Core>) + Send + 'static
    {
        self.mio_tx.send(CoreMessage::new(f))
    }
}

impl Drop for Service {
    fn drop(&mut self) {
        let _ = self.post(|_, el| el.shutdown());
    }
}

#[cfg(test)]
mod test {
    // use super::*;
    // use event::Event;

    // use std::sync::mpsc;
    // use std::sync::mpsc::Receiver;
    // use std::thread;
    // use std::time::Duration;

    // use maidsafe_utilities::event_sender::{MaidSafeObserver, MaidSafeEventCategory};
    // use rand::{self, Rng};

    // /// utility to create random vec u8 of a given size
    // fn generate_random_vec_u8(size: usize) -> Vec<u8> {
    //     rand::thread_rng().gen_iter().take(size).collect()
    // }

    // fn get_event_sender() -> (::CrustEventSender, Receiver<Event>) {
    //     let (category_tx, _) = mpsc::channel();
    //     let event_category = MaidSafeEventCategory::Crust;
    //     let (event_tx, event_rx) = mpsc::channel();
    //     (MaidSafeObserver::new(event_tx, event_category, category_tx), event_rx)
    // }

    // #[test]
    // fn bootstrap_connection_two_services() {
    //     let (event_sender_0, event_rx_0) = get_event_sender();
    //     let (event_sender_1, event_rx_1) = get_event_sender();

    //     let mut service_0 = unwrap_result!(Service::new(event_sender_0));
    //     service_0.start_service_discovery();
    //     thread::sleep(Duration::from_secs(1));
    //     service_0.enable_listen_for_peers();
    //     thread::sleep(Duration::from_secs(1));
    //     service_0.start_listening_tcp();

    //     let mut service_1 = unwrap_result!(Service::new(event_sender_1));
    //     service_1.start_service_discovery();
    //     thread::sleep(Duration::from_secs(1));
    //     service_1.seek_peers();

    //     // service_1 should have received service_0's bootstrap connection by now
    //     let contact_info_0 = match unwrap_result!(event_rx_1.recv()) {
    //         Event::NewPeer(their_contact_info) => their_contact_info,
    //         _ => panic!("1 Should have got a new peer from 0."),
    //     };
    //     println!("contact_info_0 {:?}", contact_info_0);
    //     service_1.connect(contact_info_0.tcp_acceptors[0].0);
    //     let connection_id_1 = match unwrap_result!(event_rx_1.recv()) {
    //         Event::NewConnection(peer_id) => peer_id,
    //         _ => panic!("1 Should have got a new peer_id for the connection to 0."),
    //     };
    //     println!("connection_id_1 {:?}", connection_id_1);
    //     let connection_id_0 = match unwrap_result!(event_rx_0.recv()) {
    //         Event::NewConnection(peer_id) => peer_id,
    //         _ => panic!("0 Should have got a new peer_id for the connection to 1."),
    //     };
    //     println!("connection_id_0 {:?}", connection_id_0);
    //     let data = generate_random_vec_u8(::MAX_DATA_LEN as usize + 1);
    //     service_1.send(connection_id_1, data.clone());
    //     // service_0 should have received service_1's msg
    //     match unwrap_result!(event_rx_0.recv()) {
    //         Event::NewMessage(peer_id, msg) => {
    //             assert!(connection_id_1 != peer_id);
    //             assert!(data == msg);
    //         }
    //         _ => panic!("0 Should have received a msg from 1."),
    //     }
    // }

}
